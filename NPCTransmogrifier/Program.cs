using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System;

namespace NPCTransmogrifier
{
    public class Program
    {
        static Lazy<TransmogSettings> Settings = null!; // define a Settings object that will be created or passed to the program. These settings can be found in the accompanying TransmogSettings.cs file

        public static async Task<int> Main(string[] args) // starting point of the patcher that Synthesis will recognize
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch) // tells Synthesis to run the code within public static void RunPatch below
                .SetTypicalOpen(GameRelease.SkyrimSE, "NPCTransmogrifier.esp") // boilerplate code for patchers for Skyrim Special Edition
                .SetAutogeneratedSettings( // Tells Synthesis to auto-generate the settings the first time a user installs this patcher. On subsequent runs, it'll look for settings created in a "settings.json" file
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state) 
        {
            var settings = Settings.Value; // Get the patcher's Settings
            var random = new Random(); // Create a random number generator
            int patchedNPCcount = 0; // Create a tracker that records how many NPCs were patched, which we can print at the end so the users knows if the patcher worked

            var npcs = state.LoadOrder.PriorityOrder.Npc().WinningOverrides().ToArray(); // Get all NPCs in the user's load order (only consider conflict winners, not any of the plugins that get overridden)
            
            foreach (var npcGetter in npcs) // loop through each NPC
            {
                var npcSetter = state.PatchMod.Npcs.GetOrAddAsOverride(npcGetter); // create a new override for this NPC and add it to the Synthesis output mod

                var npcFace = npcSetter.FaceMorph; // get the NPC's face morph

                if (npcFace != null) // check to make sure the face morph isn't null (this can be the case for "creature-like" NPCs such as Draugr)
                {
                    // randomize all of the sliders using the function GenerateRandomFloatBetween (which needs you to pass in the minimum slider value, maximum slider value, and the random number generator we defined above)
                    npcFace.BrowsForwardVsBack = GenerateRandomFloatBetween(settings.BrowsForwardVsBack_Min, settings.BrowsForwardVsBack_Max, random);
                    npcFace.BrowsInVsOut = GenerateRandomFloatBetween(settings.BrowsInVsOut_Min, settings.BrowsInVsOut_Max, random);
                    npcFace.BrowsUpVsDown = GenerateRandomFloatBetween(settings.BrowsUpVsDown_Min, settings.BrowsUpVsDown_Max, random);
                    npcFace.CheeksForwardVsBack = GenerateRandomFloatBetween(settings.CheeksForwardVsBack_Min, settings.CheeksForwardVsBack_Max, random);
                    npcFace.CheeksUpVsDown = GenerateRandomFloatBetween(settings.CheeksUpVsDown_Min, settings.CheeksUpVsDown_Max, random);
                    npcFace.ChinNarrowVsWide = GenerateRandomFloatBetween(settings.ChinNarrowVsWide_Min, settings.ChinNarrowVsWide_Max, random);
                    npcFace.ChinUnderbiteVsOverbite = GenerateRandomFloatBetween(settings.ChinUnderbiteVsOverbite_Min, settings.ChinUnderbiteVsOverbite_Max, random);
                    npcFace.ChinUpVsDown = GenerateRandomFloatBetween(settings.ChinUpVsDown_Min, settings.ChinUpVsDown_Max, random);
                    npcFace.EyesForwardVsBack = GenerateRandomFloatBetween(settings.EyesForwardVsBack_Min, settings.EyesForwardVsBack_Max, random);
                    npcFace.EyesInVsOut = GenerateRandomFloatBetween(settings.EyesInVsOut_Min, settings.EyesInVsOut_Max, random);
                    npcFace.EyesUpVsDown = GenerateRandomFloatBetween(settings.EyesUpVsDown_Min, settings.EyesUpVsDown_Max, random);
                    npcFace.JawForwardVsBack = GenerateRandomFloatBetween(settings.JawForwardVsBack_Min, settings.JawForwardVsBack_Max, random);
                    npcFace.JawNarrowVsWide = GenerateRandomFloatBetween(settings.JawNarrowVsWide_Min, settings.JawNarrowVsWide_Max, random);
                    npcFace.JawUpVsDown = GenerateRandomFloatBetween(settings.JawUpVsDown_Min, settings.JawUpVsDown_Max, random);
                    npcFace.LipsInVsOut = GenerateRandomFloatBetween(settings.LipsInVsOut_Min, settings.LipsInVsOut_Max, random);
                    npcFace.LipsUpVsDown = GenerateRandomFloatBetween(settings.LipsInVsOut_Min, settings.LipsInVsOut_Max, random);
                    npcFace.NoseLongVsShort = GenerateRandomFloatBetween(settings.NoseLongVsShort_Min, settings.NoseLongVsShort_Max, random);
                    npcFace.NoseUpVsDown = GenerateRandomFloatBetween(settings.NoseUpVsDown_Min, settings.NoseUpVsDown_Max, random);

                    patchedNPCcount++; // adds 1 to the patched NPC tracker
                }
            }

            Console.WriteLine("Transmogrifier patched {0} NPCs", patchedNPCcount); // once the patcher loops through all NPCs, write a message to the screen to show the user how many NPCs were patched. The "{0}" will be replaced by the value of patchedNPCcount.
            // That's it!
        }

        private static float GenerateRandomFloatBetween(float minValue, float maxValue, Random random) // Generate a random decimal number between min and max
        {
            if (minValue >= maxValue)
            {
                throw new ArgumentException("minValue must be less than maxValue");
            }

            float randomValue = (float)random.NextDouble(); // generates a random value between 0.0 and 1.0
            return minValue + randomValue * (maxValue - minValue);
        }
    }
}
